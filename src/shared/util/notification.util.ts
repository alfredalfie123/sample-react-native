import PushNotification, {
  PushNotification as IPushNotification
} from 'react-native-push-notification';
import { Platform } from 'react-native';
import PushNotificationIOS from '@react-native-community/push-notification-ios';
import store from 'redux/store';
import { pickUpPhone, hangUpPhone } from 'action/call.action';

let _notificationCallback: (notification: IPushNotification) => void;
let _notHandledNotification: IPushNotification | undefined;

PushNotification.configure({
  // (optional) Called when Token is generated (iOS and Android)
  onRegister: function (token) {
    console.log('TOKEN:', token);
  },

  // Jin: on iOS, when user taps FCM background notification, it is called!  Need test for Android
  onNotification: function (notification) {
    // console.log('onNotification:', notification);

    // process the notification
    if (_notificationCallback) {
      _notificationCallback(notification);
    } else {
      _notHandledNotification = notification;
    }
    // (required) Called when a remote is received or opened, or local notification is opened
    notification.finish(PushNotificationIOS.FetchResult.NoData);
  },

  // (optional) Called when Registered Action is pressed and invokeApp is false, if true onNotification will be called (Android)
  onAction: function (notification: any) {
    console.log('ACTION:', notification.action);
    PushNotification.cancelAllLocalNotifications();
    PushNotification.invokeApp(notification);
    if (notification.action === 'Accept') {
      store.dispatch(pickUpPhone());
    } else if (notification.action === 'Reject') {
      store.dispatch(hangUpPhone());
    }
    // console.log('NOTIFICATION:', notification);
    // process the action
  },

  // (optional) Called when the user fails to register for remote notifications. Typically occurs when APNS is having issues, or the device is a simulator. (iOS)
  onRegistrationError: function (err: Error) {
    console.error(err.message, err);
  },

  // IOS ONLY (optional): default: all - Permissions to register.
  permissions: {
    alert: true,
    badge: true,
    sound: true
  },

  // Should the initial notification be popped automatically
  // default: true
  popInitialNotification: true,

  /**
   * (optional) default: true
   * - Specified if permissions (ios) and token (android and ios) will requested or not,
   * - if not, you must call PushNotificationsHandler.requestPermissions() later
   */
  requestPermissions: Platform.OS === 'ios'
});

export default class NotificationService {
  popInitialNotification() {
    PushNotification.popInitialNotification(
      (notification) => {}
      // console.log('InitialNotication:', notification)
    );
  }

  static sendLocalNotification(notification: any) {
    console.log('++++++++++++++++ Sending notification');
    // PushNotification.localNotification({
    //   /* Android Only Properties */
    //   ticker: 'My Notification Ticker', // (optional)
    //   autoCancel: true, // (optional) default: true
    //   largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
    //   smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
    //   bigText: 'My big text that will be shown when notification is expanded', // (optional) default: "message" prop
    //   subText: 'This is a subText', // (optional) default: none
    //   color: 'red', // (optional) default: system default
    //   vibrate: true, // (optional) default: true
    //   vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
    //   tag: 'some_tag', // (optional) add tag to message
    //   group: 'group', // (optional) add group to message
    //   ongoing: false, // (optional) set whether this is an "ongoing" notification
    //   actions: ['Yes', 'No'], // (Android only) See the doc for notification actions to know more
    //   invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true
    //   /* iOS only properties */
    //   alertAction: 'view', // (optional) default: view
    //   category: '', // (optional) default: empty string
    //   /* iOS and Android properties */
    //   id: this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
    //   title: 'Local Notification', // (optional)
    //   message: 'My Notification Message', // (required)
    //   userInfo: { screen: 'home' }, // (optional) default: {} (using null throws a JSON value '<null>' error)
    //   playSound: !!soundName, // (optional) default: true
    //   soundName: soundName ? soundName : 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
    //   number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
    // });
    PushNotification.localNotification(notification);
    console.log('============== Send notification done ====================');
  }
  static registerNotificationCallback(
    cb: (notification: IPushNotification) => void
  ) {
    _notificationCallback = cb;
  }

  static pickupNotHandledNotification() {
    const ret = _notHandledNotification;
    _notHandledNotification = undefined;
    return ret;
  }
  // requestPermissions() {
  //   return PushNotification.requestPermissions();
  // }
}
